#!/bin/bash
#-------------------------------------------------------------------------------
# Universal Theos Install script
# v2.0.0
#
# Changelog
# v2.0.1 : Added error handling on removing previous install
# v2.0.0 : Made curl a hard requirement for the script
#        : Add --install-dependencies option. Default Y.
#        : Add --no-platformcheck option. Default N.
#
# v1.2.1 : Updated iPhoneOS9.3 SDK source
# v1.2.0 : Custom iPhoneOS9.3 SDK source
#          More error handling
#          UI changes
# v1.1.0 : Added Reinstall parameter
#          Additional dependecy checks
#          Check if install folder is writeable.
#          Add ownership change
#          Add wget error handling
#          Progress message formatting
# v1.0.1 : Updated sdks website
# v1.0.0 : Merged indivual scripts
# v0.2.0 : Script for Linux
# v0.1.0 : Script for Cygwin
#-------------------------------------------------------------------------------
THEOS_FOLDER_NAME="theos"
#-------------------------------------------------------------------------------
# Variables for parameters
THEOS_INSTALL_FOLDER=~/                       # -d | --installdir
CREATE_NIC="N"                                # -n | --createnic
NIC_USERNAME="My Name <myname@domain.com>"    # -u | --nicusername
NIC_PREFIX="com.mycompany"                    # -p | --nicprefix
INCLUDE_FALLBACK_HEADERS="N"                  # -f | --fallback
REINSTALL="N"                                 # -r | --reinstall
SKIP_PLATFORMCHECK="N"                        # -c | --no-platformcheck
INSTALL_DEPENDENCIES="Y"                      # -e | --install-dependencies
declare -a SDKS=(9.2);                        # -s | --sdks

#-------------------------------------------------------------------------------
# Other Variables

# SDK_WEBSITE: The website where to download SDKS
SDK_WEBSITE="https://sdks.website/dl"

# Dependencies:
# DEPS_HARD   : Hard dependecies. Required to execute this script
# DEPS_ALL    : Dependencies common to all platforms
# DEPS_CYGWIN : Cygwin dependecies
# DEPS_LINUX  : Linux dependecies
# DEPS_IOS    : iOS dependencies
declare -a DEPS_HARD=(curl)
declare -a DEPS_ALL=(wget git make perl python)
declare -a DEPS_CYGWIN=(ca-certificates openssh)
declare -a DEPS_LINUX=(ssh plistutil)
declare -a DEPS_DARWIN=(ca-certificates)

# CURL Options: This is use to download apt-cyg on Cygwin systems
# -O  : Write output to a file named as the remote file
# -L  : Follow redirects
# -k  : Allow connections to SSL sites without certs
# -s  : Silent mode. Don't output anything
CURLCMD="curl -O -J -L -k -s"

#-------------------------------------------------------------------------------
# UI Functions: Just some fancy coloring to easily view installation progress
HL_NORMAL="\e[39;49m"
HL_YELLOW="\e[30;103m"
HL_RED="\e[97;41m"
FG_GREEN="\e[92m"
FG_YELLOW="\e[93m"

echo_title () {
  local COLS=`expr $(tput cols) - 2`;
  printf "${HL_YELLOW}%-${COLS}s${HL_NORMAL}\n" "$*"
}
echo_info () {
  echo -e "${FG_GREEN}$*${HL_NORMAL}"
}
echo_warning () {
  echo -e "${FG_YELLOW}$*${HL_NORMAL}"
}
echo_n_info () {
  echo -n -e "${FG_GREEN}$*${HL_NORMAL}"
}
echo_error () {
  echo;
  echo -e "${HL_RED}$*${HL_NORMAL}"
  echo;
}
#-------------------------------------------------------------------------------
tput clear # this one works accross platforms

#-------------------------------------------------------------------------------
# start name parameters parser
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
# Use > 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use > 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
# note: if this is set to > 0 the /etc/hosts part is not recognized ( may be a bug )
while [[ $# > 1 ]]
do
key="$1"

case $key in
    -d|--installdir)
    THEOS_INSTALL_FOLDER="$2"
    shift # past argument
    ;;
    -n|--createnic)
    CREATE_NIC="$2"
    CREATE_NIC=${CREATE_NIC^^}
    shift # past argument
    ;;
    -u|--nicusername)
    NIC_USERNAME="$2"
    shift # past argument
    ;;
    -p|--nicprefix)
    NIC_PREFIX="$2"
    shift # past argument
    ;;
    -s|--sdks)
    ARG_SDKS="$2"
    declare -a SDKS=($ARG_SDKS);
    shift # past argument
    ;;
    -f|--fallback)
    INCLUDE_FALLBACK_HEADERS="$2"
    INCLUDE_FALLBACK_HEADERS=${INCLUDE_FALLBACK_HEADERS^^}
    shift # past argument
    ;;
    -r|--reinstall)
    REINSTALL="$2"
    REINSTALL=${REINSTALL^^}
    shift # past argument
    ;;
    -c|--no-platformcheck)
    SKIP_PLATFORMCHECK="$2"
    SKIP_PLATFORMCHECK=${SKIP_PLATFORMCHECK^^}
    shift # past argument
    ;;
    -e|--install-dependencies)
    INSTALL_DEPENDENCIES="$2"
    INSTALL_DEPENDENCIES=${INSTALL_DEPENDENCIES^^}
    shift # past argument
    ;;
    --default)
    DEFAULT=YES
    ;;
    *)
    # unknown option
    ;;
esac
shift # past argument or value
done
# end name parameters parser

#-------------------------------------------------------------------------------
# Check supported platforms
PLATFORM=`uname -o`
PLATFORMS=(Cygwin GNU/Linux) # still needs more iOS, macOS

if [ "$SKIP_PLATFORMCHECK" == "N" ]; then
  if [[ ! ${PLATFORMS[*]} =~ "$PLATFORM" ]]
  then
    echo_error "This script is not tested on your platform -- $PLATFORM."
    echo_warning "Run with '--no-platformcheck Y' to skip this message."
    echo;
    exit 1
  fi
fi

#-------------------------------------------------------------------------------
# Display pre-installation summary to and prompt to confirm
echo
echo_info "THEOS will be installed with the following configuration."
echo
echo -e " THEOS_INSTALL_FOLDER     = ${THEOS_INSTALL_FOLDER}${THEOS_FOLDER_NAME}"
echo -e " INCLUDE_FALLBACK_HEADERS = ${INCLUDE_FALLBACK_HEADERS}"
echo -e " REINSTALL                = ${REINSTALL}"
for i in ${SDKS[@]}; do
  SDKSTR="$SDKSTR${i} "
done
echo -e " SDKS                     = ${SDKSTR}"

echo -e " CREATE_NIC               = ${CREATE_NIC}"
if [ "$CREATE_NIC" == "Y" ]
then
echo -e "   NIC_USERNAME           = ${NIC_USERNAME}"
echo -e "   NIC_PREFIX             = ${NIC_PREFIX}"
fi
echo -e " INSTALL_DEPENDENCIES     = ${INSTALL_DEPENDENCIES}"
echo -e " SKIP_PLATFORMCHECK       = ${SKIP_PLATFORMCHECK}"

echo;
if [ "$REINSTALL" == "Y" ]; then
  if [ -d "$THEOS_INSTALL_FOLDER$THEOS_FOLDER_NAME" ]; then
    echo_warning " WARNING: This will delete the theos instance installed at $THEOS_INSTALL_FOLDER$THEOS_FOLDER_NAME."
    echo;
  fi
fi
echo_n_info "Proceed (Y/N)? ";
read -n 1 -r;
echo;
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo_error "theos install aborted."
    exit 1
fi
#-------------------------------------------------------------------------------
# Display pre-installation check
echo;
echo_title " [PRE-SETUP CHECK...]"
echo "";

echo_info ">> Checking parameters..."

# Check if the install folder is writable
if [ ! -w "$THEOS_INSTALL_FOLDER" ]
then
  echo_error "$THEOS_INSTALL_FOLDER is not writeable. Run with sudo or choose another path."
  exit 1
fi

# Check if theos already exists when not reinstalling
if [ "$REINSTALL" == "N" ]; then
  if [ -d "$THEOS_INSTALL_FOLDER$THEOS_FOLDER_NAME" ]; then
    echo_error "THEOS is already installed in $THEOS_INSTALL_FOLDER$THEOS_FOLDER_NAME."
    exit 1;
  fi
fi

# Check nic parameters
if [ "$CREATE_NIC" == "Y" ]; then

  if [ -e ~/.nicrc ]; then
    echo_error ".nicrc already exists. Back it up and remove."
    exit 1;
  fi
  # if CREATE_NIC=Y, require username and prefix
  if [ "$NIC_USERNAME" == "My Name <myname@domain.com>" ]; then
    echo_error "You need to provide a new username using the --nicusername (-u) parameter."
    exit 1
  fi

  if [ "$NIC_PREFIX" == "com.mycompany" ]; then
    echo_error "You need to provide a new prefix using the --nicprefix (-p) parameter."
    exit 1
  fi

fi
echo_info ">> Done."

#-------------------------------------------------------------------------------
echo_info ">> Checking hard dependencies..."

for i in ${DEPS_HARD[@]}; do
  echo -n "   ${i} ";
  if  [ "$PLATFORM" == "Cygwin" ] && ([[ $(cygcheck -c ${i} | grep OK) == *"OK"* ]])
  then
    echo_info "OK."
  elif [ "$PLATFORM" != "Cygwin" ] && ([[ $(dpkg-query -W -f='${Status}\n' ${i} 2>/dev/null | grep ok) == *"ok"* ]])
  then
    echo_info "OK."
  else
    echo_warning "not installed."
    echo_error "${i} is required to use this script."
    exit 1;
  fi
done

#-------------------------------------------------------------------------------
echo_info ">> Checking dependencies..."
DEP_MISSING=0

if [ "$PLATFORM" == "Cygwin" ];
then
  declare -a extdeps=${DEPS_CYGWIN[@]}
else
  declare -a extdeps=${DEPS_LINUX[@]}
fi
combined=("${DEPS_ALL[@]}" "${extdeps[@]}" )
for i in ${combined[@]}; do
  echo -n "   ${i} ";
  if  [ "$PLATFORM" == "Cygwin" ] && ([[ $(cygcheck -c ${i} | grep OK) == *"OK"* ]])
  then
    echo_info "OK."
  elif [ "$PLATFORM" != "Cygwin" ] && ([[ $(dpkg-query -W -f='${Status}\n' ${i} 2>/dev/null | grep ok) == *"ok"* ]])
  then
    echo_info "OK."
  else
    echo_warning "not installed."
    DEP_MISSING=1
  fi
done

if [ "$DEP_MISSING" == "1" ]; then
  # Show warning if INSTALL_DEPENDENCIES is provided
  if [ "$INSTALL_DEPENDENCIES" == "Y" ];then
    echo;
    echo_warning "   Warning, there are missing dependecies."
    echo_warning "   This script will to install the missing items."
    echo;
  # Otherwise, show error and exit
  else
    echo_error ">> You need to install the missing packages first."
    exit 1;
  fi

fi
echo_info ">> Done."
#-------------------------------------------------------------------------------
echo
echo_info ">> Ready to install."
echo
echo_title " [PRE-SETUP CHECK...DONE]";

echo;
echo_n_info "Proceed to install (Y/N)? ";
read -n 1 -r;
echo;
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo_error "theos install aborted."
    exit 1
fi
echo;
#-------------------------------------------------------------------------------
# Install dependencies first
if [ "$INSTALL_DEPENDENCIES" == "Y" ];then

echo_title " [INSTALLING DEPENDENCIES...]";

if [ "$PLATFORM" ==  "Cygwin" ]; then
  echo_info ">> apt-cyg"
  if [ ! -e /bin/apt-cyg ]; then
    echo_info "   Downloading..."
    ${CURLCMD} https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg
    if [[ $? != 0 ]]; then
      echo_error "Failed."
      exit 1;
    else
      echo_info "   Installing..."
      install ./apt-cyg /bin
      echo_info "   Linking to apt-get..."
      ln -s /bin/apt-cyg /bin/apt-get
      rm ./apt-cyg
    fi
  else
    echo_info "   apt-cyg is already installed."
  fi
fi

for i in ${combined[@]}; do
  echo_info ">> ${i}"
  if  [ "$PLATFORM" == "Cygwin" ] && ([[ $(cygcheck -c ${i} | grep OK) == *"OK"* ]]); then
    echo_info "   ${i} is already installed."
  elif [ "$PLATFORM" != "Cygwin" ] && ([[ $(dpkg-query -W -f='${Status}\n' ${i} 2>/dev/null | grep ok) == *"ok"* ]]); then
    echo_info "   ${i} is already installed."
  else
    echo_warning "   ${i} is not installed. Initiating install..."
    echo;
    apt-get install ${i}
    if [[ $? != 0 ]]; then
      echo_error "   ${i} installation failed.  "
      echo_warning "You may need to run apt-get update to update your package listing."
      if  [ "$PLATFORM" == "Cygwin" ]; then
        echo_warning "Or run apt-cyg update <mirror url> to add another Cygwin mirror."
        echo;
      fi
      exit 1;
    fi
  fi
done #for

echo_title " [INSTALLING DEPENDENCIES...DONE.]";
fi

#-------------------------------------------------------------------------------
echo_title " [PREPARE INSTALL FOLDER...]";

# If the install folder is missing, create it
if [ ! -d "$THEOS_INSTALL_FOLDER" ]; then
  mkdir -p $THEOS_INSTALL_FOLDER
fi

if [ "$REINSTALL" == "Y" ]; then
  echo_info ">> Removing previous installation...";
  rm -rf $THEOS_INSTALL_FOLDER$THEOS_FOLDER_NAME
  if [[ $? != 0 ]]; then
    echo_error "Failed to remove previous installation."
    echo_warning "Try running script with sudo.";
    exit 1;
  fi
  echo_info ">> Done.";
fi

echo_title " [PREPARE INSTALL FOLDER...DONE]";

#-------------------------------------------------------------------------------

# go to the install folder
pushd $THEOS_INSTALL_FOLDER > /dev/null

#-------------------------------------------------------------------------------
echo;
echo_title " [DOWNLOADING THEOS...]";

echo_info ">> Cloning git repo...";
git clone --progress --recursive https://github.com/theos/theos.git $THEOS_FOLDER_NAME
GIT_RESPONSE=$?
if [ "$GIT_RESPONSE" == "0" ]; then
  echo_info ">> Done.";
else
  echo_error "Failed to download theos."
  popd > /dev/null
  exit 1
fi

# Change the owner of the install folder so that you won't have problems
# when updating theos.
if [[ "$SUDO_UID" != "" ]]  # assume sudo was used to force install
then
  echo_info ">> Owning theos folder...";
  chown $SUDO_UID:$SUDO_GID $THEOS_FOLDER_NAME
  echo_info ">> Done.";
fi

echo_title " [DOWNLOADING THEOS...DONE]";
#-------------------------------------------------------------------------------
echo;
echo_title " [DOWNLOADING SDKS...]";

pushd $THEOS_FOLDER_NAME/sdks/ > /dev/null
for i in ${SDKS[@]}; do
  echo;
  sdk="iPhoneOS${i}.sdk"

  echo_info "Downloading ${sdk}...";

  if [ "${i}" == "9.3" ]; then
    git clone https://github.com/theos/sdks .93tmp

    GIT_RESPONSE=$?
    if [ "$GIT_RESPONSE" == "0" ]; then
      mv .93tmp/iPhoneOS9.3.sdk ./
    else
      echo_warning ">> Warning: Failed to download ${sdk}."
      echo;
    fi
    rm -rf .93tmp
  else
    wget "$SDK_WEBSITE/${sdk}.tbz2" --output-document=${sdk}.tbz2
    WGET_RESPONSE=$?

    if [ "$WGET_RESPONSE" == "0" ]; then
      echo_info "Extracting ${sdk}...";
      tar xf ${sdk}.tbz2
    else
      echo_warning ">> Warning: Failed to download ${sdk}."
      echo;
    fi
    rm ${sdk}.tbz2
  fi

done
popd > /dev/null
echo
echo_title " [DOWNLOADING SDKS...DONE.]";

#-------------------------------------------------------------------------------
echo;
echo_title " [DOWNLOADING TOOLCHAIN....]";

if [ "$PLATFORM" == "Cygwin" ];
then
  mkdir -p $THEOS_FOLDER_NAME/toolchain/windows
  echo_info ">> Dowloading Windows toolchain...";
  git clone --branch x86_64 https://github.com/coolstar/iOSToolchain4Win.git $THEOS_FOLDER_NAME/toolchain/windows/iphone
  GIT_RESPONSE=$?
  if [ "$GIT_RESPONSE" == "0" ]; then
    echo_info ">> Done.";
  else
    echo_warning ">> Warning: Failed to download toolchain.";
    echo;
  fi

else
  echo_info ">> Dowloading Linux toolchain...";
  wget https://developer.angelxwind.net/Linux/ios-toolchain_clang%2bllvm%2bld64_latest_linux_x86_64.zip
  WGET_RESPONSE=$?

  if [ "$WGET_RESPONSE" == "0" ]; then
    echo_info ">> Extracting...";
    unzip -q ios-toolchain_clang+llvm+ld64_latest_linux_x86_64.zip -d $THEOS_FOLDER_NAME/toolchain/
    rm ios-toolchain_clang+llvm+ld64_latest_linux_x86_64.zip
    echo_info ">> Done.";
  else
    echo_warning ">> Warning: Failed to download toolchain.";
    echo;
  fi


fi
echo_title " [DOWNLOADING TOOLCHAIN....DONE.]";
#-------------------------------------------------------------------------------
if [ "$INCLUDE_FALLBACK_HEADERS" == "Y" ]
then
  echo;
  echo_title " [DOWNLOADING FALLBACK HEADERS....]";
  echo_info ">> Downloading supermamon's fallback headers...${HL_NORMAL}";
  git clone https://github.com/supermamon/iOS-fallback-headers.git $THEOS_FOLDER_NAME/include/_fallback
  GIT_RESPONSE=$?
  if [ "$GIT_RESPONSE" != "0" ]; then
    echo_warning "WARNING: Fallback headers failed to download."
  fi
  echo_title " [DOWNLOADING FALLBACK HEADERS....DONE.]";
fi

#-------------------------------------------------------------------------------

popd > /dev/null

#-------------------------------------------------------------------------------
if [ "$CREATE_NIC" == "Y" ]
then

  echo_title " [CREATING .nicrc...]";
  echo "username = \"$NIC_USERNAME\"" > .nicrc
  echo "package_prefix = \"$NIC_PREFIX\"" >> .nicrc
  mv -f .nicrc ~/
  echo_title " [CREATING .nicrc...DONE.]";

fi
echo;
echo_info "THEOS install completed.";
echo;
